"use strict";(self.webpackChunkwordly_prototype=self.webpackChunkwordly_prototype||[]).push([[537],{"./node_modules/class-variance-authority/dist/index.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.d(__webpack_exports__,{F:()=>cva});var clsx__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/clsx/dist/clsx.mjs");const falsyToString=value=>"boolean"==typeof value?"".concat(value):0===value?"0":value,cx=clsx__WEBPACK_IMPORTED_MODULE_0__.$,cva=(base,config)=>props=>{var ref;if(null==(null==config?void 0:config.variants))return cx(base,null==props?void 0:props.class,null==props?void 0:props.className);const{variants,defaultVariants}=config,getVariantClassNames=Object.keys(variants).map((variant=>{const variantProp=null==props?void 0:props[variant],defaultVariantProp=null==defaultVariants?void 0:defaultVariants[variant];if(null===variantProp)return null;const variantKey=falsyToString(variantProp)||falsyToString(defaultVariantProp);return variants[variant][variantKey]})),propsWithoutUndefined=props&&Object.entries(props).reduce(((acc,param)=>{let[key,value]=param;return void 0===value||(acc[key]=value),acc}),{}),getCompoundVariantClassNames=null==config||null===(ref=config.compoundVariants)||void 0===ref?void 0:ref.reduce(((acc,param1)=>{let{class:cvClass,className:cvClassName,...compoundVariantOptions}=param1;return Object.entries(compoundVariantOptions).every((param=>{let[key,value]=param;return Array.isArray(value)?value.includes({...defaultVariants,...propsWithoutUndefined}[key]):{...defaultVariants,...propsWithoutUndefined}[key]===value}))?[...acc,cvClass,cvClassName]:acc}),[]);return cx(base,getVariantClassNames,getCompoundVariantClassNames,null==props?void 0:props.class,null==props?void 0:props.className)}},"./node_modules/clsx/dist/clsx.mjs":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{function r(e){var t,f,n="";if("string"==typeof e||"number"==typeof e)n+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=" "),n+=f);else for(t in e)e[t]&&(n&&(n+=" "),n+=t);return n}function clsx(){for(var e,t,f=0,n="";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=" "),n+=t);return n}__webpack_require__.d(__webpack_exports__,{$:()=>clsx})},"./src/components/ui/color-palette.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{BrandColors:()=>BrandColors,GrayPalette:()=>GrayPalette,PinkPalette:()=>PinkPalette,SemanticColors:()=>SemanticColors,SystemColors:()=>SystemColors,TealPalette:()=>TealPalette,__namedExportsOrder:()=>__namedExportsOrder,default:()=>color_palette_stories});var react=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),dist=__webpack_require__("./node_modules/class-variance-authority/dist/index.mjs"),__jsx=react.createElement,ColorSwatch=function ColorSwatch(_ref){var colorName=_ref.colorName,colorValue=_ref.colorValue,_ref$textColor=_ref.textColor,textColor=void 0===_ref$textColor?"text-foreground":_ref$textColor;return __jsx("div",{className:"flex flex-col"},__jsx("div",{className:"w-full h-16 rounded-md mb-2 shadow-sm",style:{backgroundColor:colorValue}}),__jsx("div",{className:"flex flex-col"},__jsx("span",{className:"text-sm font-medium ".concat(textColor)},colorName),__jsx("span",{className:"text-xs text-muted-foreground"},colorValue)))};ColorSwatch.displayName="ColorSwatch";var colorPaletteVariants=(0,dist.F)("p-6 rounded-lg border",{variants:{variant:{default:"bg-card",ghost:"bg-transparent border-none"}},defaultVariants:{variant:"default"}}),ColorPalette=function ColorPalette(_ref2){var title=_ref2.title,description=_ref2.description,colors=_ref2.colors,className=_ref2.className,variant=_ref2.variant;return __jsx("div",{className:colorPaletteVariants({variant,className})},__jsx("div",{className:"mb-4"},__jsx("h3",{className:"text-lg font-semibold text-foreground"},title),description&&__jsx("p",{className:"text-sm text-muted-foreground mt-1"},description)),__jsx("div",{className:"grid grid-cols-2 md:grid-cols-5 gap-6"},colors.map((function(color){return __jsx(ColorSwatch,{key:color.name,colorName:color.name,colorValue:color.value,textColor:color.textColor})}))))};ColorPalette.displayName="ColorPalette";try{ColorPalette.displayName="ColorPalette",ColorPalette.__docgenInfo={description:"",displayName:"ColorPalette",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},colors:{defaultValue:null,description:"",name:"colors",required:!0,type:{name:"{ name: string; value: string; textColor?: string | undefined; }[]"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"ghost"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ui/color-palette.tsx#ColorPalette"]={docgenInfo:ColorPalette.__docgenInfo,name:"ColorPalette",path:"src/components/ui/color-palette.tsx#ColorPalette"})}catch(__react_docgen_typescript_loader_error){}try{colorpalette.displayName="colorpalette",colorpalette.__docgenInfo={description:"",displayName:"colorpalette",props:{title:{defaultValue:null,description:"",name:"title",required:!0,type:{name:"string"}},description:{defaultValue:null,description:"",name:"description",required:!1,type:{name:"string"}},colors:{defaultValue:null,description:"",name:"colors",required:!0,type:{name:"{ name: string; value: string; textColor?: string | undefined; }[]"}},className:{defaultValue:null,description:"",name:"className",required:!1,type:{name:"string"}},variant:{defaultValue:null,description:"",name:"variant",required:!1,type:{name:"enum",value:[{value:'"default"'},{value:'"ghost"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/components/ui/color-palette.tsx#colorpalette"]={docgenInfo:colorpalette.__docgenInfo,name:"colorpalette",path:"src/components/ui/color-palette.tsx#colorpalette"})}catch(__react_docgen_typescript_loader_error){}const color_palette_stories={title:"Design System/ColorPalette",component:ColorPalette,parameters:{layout:"padded"},tags:["autodocs"]};var BrandColors={args:{title:"Brand Colors",description:"The primary brand colors that define Wordly's visual identity.",colors:[{name:"Teal 500",value:"hsl(187, 76%, 33%)",textColor:"text-white"},{name:"Pink 500",value:"hsl(328, 100%, 44%)",textColor:"text-white"}]}},TealPalette={args:{title:"Teal Palette",description:"Primary brand color with 10 shades for various UI applications.",colors:[{name:"Teal 50",value:"hsl(187, 60%, 94%)"},{name:"Teal 100",value:"hsl(187, 65%, 85%)"},{name:"Teal 200",value:"hsl(187, 65%, 74%)"},{name:"Teal 300",value:"hsl(187, 65%, 58%)"},{name:"Teal 400",value:"hsl(187, 71%, 45%)"},{name:"Teal 500",value:"hsl(187, 76%, 33%)",textColor:"text-white"},{name:"Teal 600",value:"hsl(187, 80%, 26%)",textColor:"text-white"},{name:"Teal 700",value:"hsl(187, 85%, 20%)",textColor:"text-white"},{name:"Teal 800",value:"hsl(187, 90%, 14%)",textColor:"text-white"},{name:"Teal 900",value:"hsl(187, 95%, 8%)",textColor:"text-white"}]}},PinkPalette={args:{title:"Pink Palette",description:"Secondary brand color with 10 shades for various UI applications.",colors:[{name:"Pink 50",value:"hsl(328, 100%, 94%)"},{name:"Pink 100",value:"hsl(328, 100%, 86%)"},{name:"Pink 200",value:"hsl(328, 100%, 76%)"},{name:"Pink 300",value:"hsl(328, 100%, 67%)"},{name:"Pink 400",value:"hsl(328, 100%, 57%)",textColor:"text-white"},{name:"Pink 500",value:"hsl(328, 100%, 44%)",textColor:"text-white"},{name:"Pink 600",value:"hsl(328, 100%, 35%)",textColor:"text-white"},{name:"Pink 700",value:"hsl(328, 100%, 26%)",textColor:"text-white"},{name:"Pink 800",value:"hsl(328, 100%, 17%)",textColor:"text-white"},{name:"Pink 900",value:"hsl(328, 100%, 8%)",textColor:"text-white"}]}},SemanticColors={args:{title:"Semantic Colors",description:"Colors that convey specific meanings across the application.",colors:[{name:"Success",value:"hsl(142, 76%, 36%)",textColor:"text-white"},{name:"Error",value:"hsl(5, 100%, 44%)",textColor:"text-white"}]}},GrayPalette={args:{title:"Gray Palette",description:"Neutral gray scale for backgrounds, text, and UI elements.",colors:[{name:"Gray 50",value:"hsl(210, 20%, 98%)"},{name:"Gray 100",value:"hsl(210, 17%, 95%)"},{name:"Gray 200",value:"hsl(210, 16%, 90%)"},{name:"Gray 300",value:"hsl(210, 14%, 83%)"},{name:"Gray 400",value:"hsl(210, 12%, 64%)"},{name:"Gray 500",value:"hsl(210, 10%, 43%)",textColor:"text-white"},{name:"Gray 600",value:"hsl(210, 9%, 31%)",textColor:"text-white"},{name:"Gray 700",value:"hsl(210, 10%, 23%)",textColor:"text-white"},{name:"Gray 800",value:"hsl(210, 11%, 15%)",textColor:"text-white"},{name:"Gray 900",value:"hsl(210, 12%, 8%)",textColor:"text-white"}]}},SystemColors={args:{title:"System UI Colors",description:"Colors used for application interface elements.",colors:[{name:"Background",value:"hsl(0, 0%, 100%)"},{name:"Foreground",value:"hsl(222.2, 84%, 4.9%)",textColor:"text-white"},{name:"Card",value:"hsl(0, 0%, 100%)"},{name:"Card Foreground",value:"hsl(222.2, 84%, 4.9%)",textColor:"text-white"},{name:"Border",value:"hsl(214.3, 31.8%, 91.4%)"},{name:"Input",value:"hsl(214.3, 31.8%, 91.4%)"},{name:"Ring",value:"hsl(222.2, 84%, 4.9%)",textColor:"text-white"},{name:"Muted",value:"hsl(210, 40%, 96.1%)"},{name:"Muted Foreground",value:"hsl(215.4, 16.3%, 46.9%)"}]}};BrandColors.parameters={...BrandColors.parameters,docs:{...BrandColors.parameters?.docs,source:{originalSource:'{\n  args: {\n    title: "Brand Colors",\n    description: "The primary brand colors that define Wordly\'s visual identity.",\n    colors: [{\n      name: "Teal 500",\n      value: "hsl(187, 76%, 33%)",\n      textColor: "text-white"\n    }, {\n      name: "Pink 500",\n      value: "hsl(328, 100%, 44%)",\n      textColor: "text-white"\n    }]\n  }\n}',...BrandColors.parameters?.docs?.source}}},TealPalette.parameters={...TealPalette.parameters,docs:{...TealPalette.parameters?.docs,source:{originalSource:'{\n  args: {\n    title: "Teal Palette",\n    description: "Primary brand color with 10 shades for various UI applications.",\n    colors: [{\n      name: "Teal 50",\n      value: "hsl(187, 60%, 94%)"\n    }, {\n      name: "Teal 100",\n      value: "hsl(187, 65%, 85%)"\n    }, {\n      name: "Teal 200",\n      value: "hsl(187, 65%, 74%)"\n    }, {\n      name: "Teal 300",\n      value: "hsl(187, 65%, 58%)"\n    }, {\n      name: "Teal 400",\n      value: "hsl(187, 71%, 45%)"\n    }, {\n      name: "Teal 500",\n      value: "hsl(187, 76%, 33%)",\n      textColor: "text-white"\n    }, {\n      name: "Teal 600",\n      value: "hsl(187, 80%, 26%)",\n      textColor: "text-white"\n    }, {\n      name: "Teal 700",\n      value: "hsl(187, 85%, 20%)",\n      textColor: "text-white"\n    }, {\n      name: "Teal 800",\n      value: "hsl(187, 90%, 14%)",\n      textColor: "text-white"\n    }, {\n      name: "Teal 900",\n      value: "hsl(187, 95%, 8%)",\n      textColor: "text-white"\n    }]\n  }\n}',...TealPalette.parameters?.docs?.source}}},PinkPalette.parameters={...PinkPalette.parameters,docs:{...PinkPalette.parameters?.docs,source:{originalSource:'{\n  args: {\n    title: "Pink Palette",\n    description: "Secondary brand color with 10 shades for various UI applications.",\n    colors: [{\n      name: "Pink 50",\n      value: "hsl(328, 100%, 94%)"\n    }, {\n      name: "Pink 100",\n      value: "hsl(328, 100%, 86%)"\n    }, {\n      name: "Pink 200",\n      value: "hsl(328, 100%, 76%)"\n    }, {\n      name: "Pink 300",\n      value: "hsl(328, 100%, 67%)"\n    }, {\n      name: "Pink 400",\n      value: "hsl(328, 100%, 57%)",\n      textColor: "text-white"\n    }, {\n      name: "Pink 500",\n      value: "hsl(328, 100%, 44%)",\n      textColor: "text-white"\n    }, {\n      name: "Pink 600",\n      value: "hsl(328, 100%, 35%)",\n      textColor: "text-white"\n    }, {\n      name: "Pink 700",\n      value: "hsl(328, 100%, 26%)",\n      textColor: "text-white"\n    }, {\n      name: "Pink 800",\n      value: "hsl(328, 100%, 17%)",\n      textColor: "text-white"\n    }, {\n      name: "Pink 900",\n      value: "hsl(328, 100%, 8%)",\n      textColor: "text-white"\n    }]\n  }\n}',...PinkPalette.parameters?.docs?.source}}},SemanticColors.parameters={...SemanticColors.parameters,docs:{...SemanticColors.parameters?.docs,source:{originalSource:'{\n  args: {\n    title: "Semantic Colors",\n    description: "Colors that convey specific meanings across the application.",\n    colors: [{\n      name: "Success",\n      value: "hsl(142, 76%, 36%)",\n      textColor: "text-white"\n    }, {\n      name: "Error",\n      value: "hsl(5, 100%, 44%)",\n      textColor: "text-white"\n    }]\n  }\n}',...SemanticColors.parameters?.docs?.source}}},GrayPalette.parameters={...GrayPalette.parameters,docs:{...GrayPalette.parameters?.docs,source:{originalSource:'{\n  args: {\n    title: "Gray Palette",\n    description: "Neutral gray scale for backgrounds, text, and UI elements.",\n    colors: [{\n      name: "Gray 50",\n      value: "hsl(210, 20%, 98%)"\n    }, {\n      name: "Gray 100",\n      value: "hsl(210, 17%, 95%)"\n    }, {\n      name: "Gray 200",\n      value: "hsl(210, 16%, 90%)"\n    }, {\n      name: "Gray 300",\n      value: "hsl(210, 14%, 83%)"\n    }, {\n      name: "Gray 400",\n      value: "hsl(210, 12%, 64%)"\n    }, {\n      name: "Gray 500",\n      value: "hsl(210, 10%, 43%)",\n      textColor: "text-white"\n    }, {\n      name: "Gray 600",\n      value: "hsl(210, 9%, 31%)",\n      textColor: "text-white"\n    }, {\n      name: "Gray 700",\n      value: "hsl(210, 10%, 23%)",\n      textColor: "text-white"\n    }, {\n      name: "Gray 800",\n      value: "hsl(210, 11%, 15%)",\n      textColor: "text-white"\n    }, {\n      name: "Gray 900",\n      value: "hsl(210, 12%, 8%)",\n      textColor: "text-white"\n    }]\n  }\n}',...GrayPalette.parameters?.docs?.source}}},SystemColors.parameters={...SystemColors.parameters,docs:{...SystemColors.parameters?.docs,source:{originalSource:'{\n  args: {\n    title: "System UI Colors",\n    description: "Colors used for application interface elements.",\n    colors: [{\n      name: "Background",\n      value: "hsl(0, 0%, 100%)"\n    }, {\n      name: "Foreground",\n      value: "hsl(222.2, 84%, 4.9%)",\n      textColor: "text-white"\n    }, {\n      name: "Card",\n      value: "hsl(0, 0%, 100%)"\n    }, {\n      name: "Card Foreground",\n      value: "hsl(222.2, 84%, 4.9%)",\n      textColor: "text-white"\n    }, {\n      name: "Border",\n      value: "hsl(214.3, 31.8%, 91.4%)"\n    }, {\n      name: "Input",\n      value: "hsl(214.3, 31.8%, 91.4%)"\n    }, {\n      name: "Ring",\n      value: "hsl(222.2, 84%, 4.9%)",\n      textColor: "text-white"\n    }, {\n      name: "Muted",\n      value: "hsl(210, 40%, 96.1%)"\n    }, {\n      name: "Muted Foreground",\n      value: "hsl(215.4, 16.3%, 46.9%)"\n    }]\n  }\n}',...SystemColors.parameters?.docs?.source}}};const __namedExportsOrder=["BrandColors","TealPalette","PinkPalette","SemanticColors","GrayPalette","SystemColors"]}}]);